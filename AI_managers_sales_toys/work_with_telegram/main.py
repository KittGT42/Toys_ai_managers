import os
import asyncio
from dotenv import load_dotenv
from telethon import TelegramClient, events
from openai import OpenAI
from typing import Optional, Dict, Any, Set
import json
from AI_managers_sales_toys.work_with_telegram.utils import configure_logging
from AI_managers_sales_toys.work_with_telegram.work_with_telegram_bot.telegram_bot_handler import send_telegram_message
from AI_managers_sales_toys.work_with_database_MongoDB.mongodb_messages import Messages
from AI_managers_sales_toys.work_with_database_PostgreSQL.database import DatabaseUser, DatabaseOrder, DatabaseProduct

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ª–æ–≥–µ—Ä–∞
logger = configure_logging()

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
API_ID = os.getenv('TELEGRAM_API_ID')
API_HASH = os.getenv('TELEGRAM_API_HASH')
PHONE_NUMBER = os.getenv('PHONE_NUMBER')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
ASSISTANT_ID = 'asst_AfkpQMAiugaOGrp12k09uFpu'
ADMIN_USER_ID = int(os.getenv('ADMIN_USER_ID'))

# –¢–∞–π–º–∞—É—Ç–∏ —Ç–∞ —Ä–µ—Ç—Ä–∞—ó
MAX_RETRIES = 3
TIMEOUT = 60  # —Å–µ–∫—É–Ω–¥
DB_TIMEOUT = 30  # —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ–ø–µ—Ä–∞—Ü—ñ–π –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
MESSAGE_TIMEOUT = 10  # —Å–µ–∫—É–Ω–¥ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
RETRY_DELAY = 5  # —Å–µ–∫—É–Ω–¥ –º—ñ–∂ —Å–ø—Ä–æ–±–∞–º–∏

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
client = TelegramClient('session', API_ID, API_HASH)
openai_client = OpenAI(
    api_key=OPENAI_API_KEY,
    timeout=TIMEOUT,
    max_retries=MAX_RETRIES
)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑ –¥–∞–Ω–∏—Ö
user_db = DatabaseUser()
order_db = DatabaseOrder()
product_db = DatabaseProduct()
db_for_messages = Messages('messages_db', 'messages_tg')
db_for_thread = Messages('threads_ai_id_db', 'threads_ai')

class Thread:
    """–ö–ª–∞—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ —Ç—Ä–µ–¥–∞–º–∏ OpenAI"""

    def __init__(self, new_thread_id):
        self.id = new_thread_id


async def get_products_by_category(age_year, age_month, gender, main_product_category, budget):
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è —Ç–∏–ø—ñ–≤
        if age_year != '0':
            age_year = float(age_year)
        if age_month != '0':
            age_month = float(age_month) / 12
        if gender == 'male':
            gender = '–•–ª–æ–ø—á–∏–∫'
        if gender == 'female':
            gender = '–î—ñ–≤—á–∏–Ω–∫–∞'
        if budget != '0':
            budget = float(budget)

        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ asyncio.to_thread –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ DB –∑–∞–ø–∏—Ç—É
        products_from_db = await asyncio.to_thread(
            product_db.select_product_by_different_category,
            age_year=age_year,
            age_month=age_month,
            gender=gender,
            main_product_category=main_product_category,
            budget=budget
        )
        result = []

        for product in products_from_db:
           data = {
                "name": product.name,
                "price": str(product.price),
                "article": product.article,
                "age_category": getattr(product, 'age_category', ''),
                "color": getattr(product, 'color', ''),
                "material": getattr(product, 'material', ''),
                "description": getattr(product, 'description', ''),
                "main_image": getattr(product, 'main_image', ''),
                "gender": getattr(product, 'gender', ''),
                "product_status": getattr(product, 'product_status', ''),
                "product_type": getattr(product, 'product_type', ''),
                "quantity": product.quantity,
                "images_urls": getattr(product, 'images_urls', [])
            }
           print(data)
           result.append(data)

        return {
            "status": "success",
            "data": result
        }

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—ñ–≤: {str(e)}")
        return {
            "status": "error",
            "message": f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö: {str(e)}"
        }

def validate_tool_output(output: dict) -> bool:
    """–í–∞–ª—ñ–¥–∞—Ü—ñ—è –≤–∏—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤"""
    required_fields = ["tool_call_id", "output"]
    return all(field in output for field in required_fields)


async def get_product_info(article: str) -> dict:
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç–æ–≤–∞—Ä –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–æ—é –≤–∞–ª—ñ–¥–∞—Ü—ñ—î—é"""
    try:
        logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç–æ–≤–∞—Ä: {article}")

        product = await asyncio.to_thread(product_db.select_product, article)
        logger.debug(f"–û—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ –∑ –ë–î: {product}")

        if not product:
            logger.warning(f"–¢–æ–≤–∞—Ä {article} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö")
            return {
                "status": "error",
                "message": f"–¢–æ–≤–∞—Ä –∑ –∞—Ä—Ç–∏–∫—É–ª–æ–º {article} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
            }

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
        required_fields = ["name", "price", "article", "quantity"]
        missing_fields = [field for field in required_fields if not hasattr(product, field)]

        if missing_fields:
            logger.error(f"–í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è: {missing_fields}")
            return {
                "status": "error",
                "message": f"–ù–µ–ø–æ–≤–Ω—ñ –¥–∞–Ω—ñ —Ç–æ–≤–∞—Ä—É: –≤—ñ–¥—Å—É—Ç–Ω—ñ –ø–æ–ª—è {', '.join(missing_fields)}"
            }

        product_data = {
            "name": product.name,
            "price": str(product.price),
            "article": product.article,
            "age_category": getattr(product, 'age_category', ''),
            "color": getattr(product, 'color', ''),
            "material": getattr(product, 'material', ''),
            "description": getattr(product, 'description', ''),
            "main_image": getattr(product, 'main_image', ''),
            "gender": getattr(product, 'gender', ''),

        }

        logger.debug(f"–ü—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ —Ç–æ–≤–∞—Ä—É: {product_data}")

        return {
            "status": "success",
            "data": product_data
        }

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç–æ–≤–∞—Ä {article}: {str(e)}")
        return {
            "status": "error",
            "message": f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—É: {str(e)}"
        }


async def sent_data_for_order(
        user_name: str,
        user_phone: str,
        user_address: str,
        name: str,
        price: str,
        article: str,
        user_id: str
) -> Dict[str, str]:
    """–û–±—Ä–æ–±–∫–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–∏—Ö"""
    try:
        logger.info(f"–û–±—Ä–æ–±–∫–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")

        # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–ª–µ—Ñ–æ–Ω—É
        user_phone = user_phone.replace(' ', '').replace('(', '').replace(')', '')
        if not user_phone.startswith('+'):
            user_phone = '+38' + user_phone

        # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
        if not all([user_name, user_phone, user_address, name, price, article]):
            raise ValueError("–í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")

        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if await asyncio.to_thread(user_db.select_user, user_id=user_id) is None:
            await asyncio.to_thread(user_db.insert_user, user_id, user_name, user_phone)

        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        products_data = [{"article": article, "quantity": 1}]
        await asyncio.to_thread(order_db.insert_order, user_id, user_address, products_data)

        # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        message = (f"üõç –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!\n\n"
                   f"üë§ –ü–æ–∫—É–ø–µ—Ü—å: {user_name}\n"
                   f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user_phone}\n"
                   f"üìç –ê–¥—Ä–µ—Å–∞: {user_address}\n\n"
                   f"üì¶ –¢–æ–≤–∞—Ä: {name}\n"
                   f"üí∞ –¶—ñ–Ω–∞: {price}\n"
                   f"üìé –ê—Ä—Ç–∏–∫—É–ª: {article}")

        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–µ–∑ await
        message_sent = send_telegram_message(message)

        if not message_sent:
            raise Exception("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram")

        logger.info(f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
        return {
            "status": "success",
            "message": "üéâ –î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è."
        }

    except Exception as e:
        error_message = str(e)
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {error_message}")
        return {
            "status": "error",
            "message": f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {error_message}"
        }


async def process_tool_calls(thread_id: str, run_id: str, tool_calls: list, user_id) -> list:
    tool_outputs = []

    for tool_call in tool_calls:
        try:
            logger.info(f"–û–±—Ä–æ–±–∫–∞ tool_call: {tool_call.function.name}")
            function_args = json.loads(tool_call.function.arguments)
            logger.debug(f"–ê—Ä–≥—É–º–µ–Ω—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—ó: {function_args}")

            if tool_call.function.name == "get_products_by_category":
                result = await get_products_by_category(
                    function_args['age_year'],
                    function_args['age_month'],
                    function_args['gender'],
                    function_args['main_product_category'],
                    function_args['budget'],
                )
                logger.debug(f"–†–µ–∑—É–ª—å—Ç–∞—Ç get_products_by_category: {result}")
                output = json.dumps(result)
                tool_outputs.append({
                    "tool_call_id": tool_call.id,
                    "output": output
                })

            elif tool_call.function.name == "get_product_info":
                result = await get_product_info(function_args['article'])
                logger.debug(f"–†–µ–∑—É–ª—å—Ç–∞—Ç get_product_info: {result}")
                output = json.dumps(result)
                tool_outputs.append({
                    "tool_call_id": tool_call.id,
                    "output": output
                })

            elif tool_call.function.name == "sent_data_for_order":
                result = await sent_data_for_order(
                    function_args['user_name'],
                    function_args['user_phone'],
                    function_args['user_address'],
                    function_args['name'],
                    function_args['price'],
                    function_args['article'],
                    user_id)
                logger.debug(f"–†–µ–∑—É–ª—å—Ç–∞—Ç sent_data_for_order: {result}")
                output = json.dumps(result)
                tool_outputs.append({
                    "tool_call_id": tool_call.id,
                    "output": output
                })

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ tool_call {tool_call.id}: {str(e)}")
            error_output = {
                "status": "error",
                "message": f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É: {str(e)}"
            }
            logger.debug(f"Error output: {error_output}")
            tool_outputs.append({
                "tool_call_id": tool_call.id,
                "output": json.dumps(error_output)
            })

    logger.info(f"–ü—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(tool_outputs)} tool_outputs")
    return tool_outputs


async def handle_run_status(run, thread_id: str, event, user_id) -> Optional[bool]:
    """–û–±—Ä–æ–±–∫–∞ —Å—Ç–∞—Ç—É—Å—É run –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–º –ª–æ–≥—É–≤–∞–Ω–Ω—è–º"""
    logger.info(f"–û–±—Ä–æ–±–∫–∞ run status: {run.status}")

    if run.status == 'requires_action':
        tool_calls = run.required_action.submit_tool_outputs.tool_calls
        logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ {len(tool_calls)} tool calls")

        tool_outputs = await process_tool_calls(thread_id, run.id, tool_calls, user_id=user_id)

        if tool_outputs:
            try:
                logger.debug(f"–í—ñ–¥–ø—Ä–∞–≤–∫–∞ tool outputs: {json.dumps(tool_outputs, indent=2)}")
                run = openai_client.beta.threads.runs.submit_tool_outputs(
                    thread_id=thread_id,
                    run_id=run.id,
                    tool_outputs=tool_outputs
                )
                logger.info(f"Tool outputs –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ –¥–ª—è run {run.id}")
                return None  # –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ tool outputs: {e}")
                await event.reply("–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É.")
                return False

    elif run.status == 'completed':
        logger.info("Run –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        return True

    elif run.status in ['failed', 'expired', 'cancelled']:
        error_message = getattr(run, 'last_error', '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞')
        logger.error(f"Run failed with status: {run.status}, error: {error_message}")
        await event.reply("–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É.")
        return False

    return None  # –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è


@client.on(events.NewMessage())
async def message_handler(event):
    user_id = str(event.sender_id)
    user_message = event.message.text.strip()
    sender = await event.get_sender()
    username = sender.username if sender and hasattr(sender, 'username') else "No username"

    if user_message.startswith('/'):
        return

    try:
        # –ó–∞–ø–∏—Å—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        await asyncio.to_thread(db_for_messages.add_message_to_tg_db,
                                username=username,
                                user_id_tg=user_id,
                                messenger_name='Telegram',
                                role='user',
                                content=user_message)

        # –û—Ç—Ä–∏–º—É—î–º–æ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ thread
        try:
            thread_data = db_for_thread.search_tread_id(user_id)
            thread_id = thread_data['thread_id'] if thread_data else None
        except Exception as e:
            thread_id = None
            logger.error(f'–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ—Ç–æ–∫—É: {e}')

        if thread_id:
            logger.info(f'–ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ—Ç—ñ–∫: {thread_id}')
        else:
            thread = openai_client.beta.threads.create()
            db_for_thread.add_thread_id(user_id, thread.id)
            logger.info(f'–°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π —Ç—Ä–µ–¥: {thread.id}')
            thread_id = thread.id

        # –î–æ–¥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ —Ç—Ä–µ–¥—É
        openai_client.beta.threads.messages.create(
            thread_id=thread_id,
            role="user",
            content=user_message
        )

        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞ –∑–∞–ø—É—Å–∫–∞—î–º–æ run
        run = openai_client.beta.threads.runs.create(
            thread_id=thread_id,
            assistant_id=ASSISTANT_ID
        )

        start_time = asyncio.get_event_loop().time()
        retries = 0

        while True:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç—É
            if asyncio.get_event_loop().time() - start_time > TIMEOUT:
                logger.error("–ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ")
                await event.reply("–í–∏–±–∞—á—Ç–µ, –∑–∞–ø–∏—Ç –∑–∞–π–Ω—è–≤ –∑–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ —á–∞—Å—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
                return

            run = openai_client.beta.threads.runs.retrieve(
                thread_id=thread_id,
                run_id=run.id
            )

            status_result = await handle_run_status(run, thread_id, event, user_id=user_id)

            if status_result is True:  # –£—Å–ø—ñ—à–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
                break
            elif status_result is False:  # –ü–æ–º–∏–ª–∫–∞
                return

            # –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é —Å–ø—Ä–æ–±–æ—é
            await asyncio.sleep(1)

        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        messages = openai_client.beta.threads.messages.list(thread_id=thread_id)
        assistant_response = messages.data[0].content[0].text.value

# –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞
        await asyncio.to_thread(db_for_messages.add_message_to_tg_db,
                              username=username,
                              user_id_tg=user_id,
                              messenger_name='Telegram',
                              role='assistant',
                              content=assistant_response)

        await event.reply(assistant_response)

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        await event.reply("–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É.")


async def init_assistant():
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
    try:
        logger.info("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ OpenAI API...")
        assistant = openai_client.beta.assistants.retrieve(ASSISTANT_ID)
        logger.info(f"–ê—Å–∏—Å—Ç–µ–Ω—Ç {assistant.name} —É—Å–ø—ñ—à–Ω–æ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return True
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞: {e}")
        return False


async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
    try:
        assert all([API_ID, API_HASH, OPENAI_API_KEY]), "–ü–æ–º–∏–ª–∫–∞: –≤—ñ–¥—Å—É—Ç–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞"

        logger.info("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞...")
        if not await init_assistant():
            raise Exception("–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞")

        logger.info("–ó–∞–ø—É—Å–∫ Telegram –∫–ª—ñ—î–Ω—Ç–∞...")
        await client.start(phone=PHONE_NUMBER)
        logger.info("Telegram –∫–ª—ñ—î–Ω—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∏–π!")

        await client.run_until_disconnected()

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É: {e}")
        raise


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        raise