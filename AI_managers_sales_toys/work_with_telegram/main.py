import os
from dotenv import load_dotenv
from telethon import TelegramClient, events
from openai import OpenAI
import json
import asyncio
from datetime import datetime, timedelta
from typing import Optional, Dict, Any
from AI_managers_sales_toys.work_with_telegram.utils import configure_logging
from AI_managers_sales_toys.work_with_telegram.work_with_telegram_bot.telegram_bot_handler import send_telegram_message
from AI_managers_sales_toys.work_with_database_MongoDB.mongodb_messages import Messages
from AI_managers_sales_toys.work_with_database_PostgreSQL.database import DatabaseUser, DatabaseOrder

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑ –¥–∞–Ω–∏—Ö
user_db = DatabaseUser()
order_db = DatabaseOrder()
db_for_messages = Messages('messages_db', 'messages_tg')
db_for_thread = Messages('threads_ai_id_db', 'threads_ai')

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
load_dotenv()
logger = configure_logging()

API_ID = os.getenv('TELEGRAM_API_ID')
API_HASH = os.getenv('TELEGRAM_API_HASH')
PHONE_NUMBER = os.getenv('PHONE_NUMBER')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
ASSISTANT_ID = os.getenv('ASSISTANT_ID_telegram_bot_sale_toys')
ADMIN_USER_ID = int(os.getenv('ADMIN_USER_ID'))

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç—ñ–≤
client = TelegramClient('session', API_ID, API_HASH)
openai_client = OpenAI(api_key=OPENAI_API_KEY)


async def wait_for_run_completion(thread_id: str, run_id: str, timeout_seconds: int = 60) -> Any:
    """–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è run –∑ —Ç–∞–π–º–∞—É—Ç–æ–º"""
    start_time = datetime.now()
    timeout = timedelta(seconds=timeout_seconds)

    logger.info(f"–ü–æ—á–∞—Ç–æ–∫ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è run {run_id}")

    while (datetime.now() - start_time) < timeout:
        try:
            current_run = openai_client.beta.threads.runs.retrieve(
                thread_id=thread_id,
                run_id=run_id
            )

            logger.info(f"Run {run_id} —Å—Ç–∞—Ç—É—Å: {current_run.status}")

            if current_run.status == 'requires_action':
                logger.info(f"Run {run_id} –ø–æ—Ç—Ä–µ–±—É—î –¥—ñ–π, –æ–±—Ä–æ–±–ª—è—î–º–æ...")
                return current_run

            if current_run.status in ['completed', 'failed', 'expired']:
                logger.info(f"Run {run_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑—ñ —Å—Ç–∞—Ç—É—Å–æ–º: {current_run.status}")
                return current_run

            await asyncio.sleep(2)

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ —Å—Ç–∞—Ç—É—Å—É run: {e}")
            await asyncio.sleep(2)

    try:
        logger.warning(f"–¢–∞–π–º–∞—É—Ç –¥–ª—è run {run_id}, —Å–ø—Ä–æ–±–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è...")
        openai_client.beta.threads.runs.cancel(
            thread_id=thread_id,
            run_id=run_id
        )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ run: {e}")

    raise TimeoutError(f"Run {run_id} –Ω–µ –∑–∞–≤–µ—Ä—à–∏–≤—Å—è –ø—Ä–æ—Ç—è–≥–æ–º {timeout_seconds} —Å–µ–∫—É–Ω–¥")


async def cleanup_existing_runs(thread_id: str) -> None:
    """–û—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö run –≤ —Ç—Ä–µ–¥—ñ"""
    try:
        runs = openai_client.beta.threads.runs.list(thread_id=thread_id)
        for run in runs.data:
            if run.status in ['in_progress', 'requires_action']:
                try:
                    openai_client.beta.threads.runs.cancel(
                        thread_id=thread_id,
                        run_id=run.id
                    )
                    logger.info(f"–°–∫–∞—Å–æ–≤–∞–Ω–æ run {run.id} –≤ —Ç—Ä–µ–¥—ñ {thread_id}")
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ run {run.id}: {e}")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ runs: {e}")


async def sent_data_for_order(
    user_name: str,
    user_phone: str,
    user_address: str,
    name: str,
    price: str,
    article: str,
    user_id: int
) -> Dict[str, str]:
    """–û–±—Ä–æ–±–∫–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–∏—Ö"""
    try:
        # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–ª–µ—Ñ–æ–Ω—É
        user_phone = user_phone.replace(' ', '').replace('(', '').replace(')', '')
        if not user_phone.startswith('+'):
            user_phone = '+38' + user_phone

        # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ü—ñ–Ω–∏
        if not price.endswith('–≥—Ä–Ω'):
            price = f"{price} –≥—Ä–Ω"

        # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        message = (f"üõç –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!\n\n"
                  f"üë§ –ü–æ–∫—É–ø–µ—Ü—å: {user_name}\n"
                  f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user_phone}\n"
                  f"üìç –ê–¥—Ä–µ—Å–∞: {user_address}\n\n"
                  f"üì¶ –¢–æ–≤–∞—Ä: {name}\n"
                  f"üí∞ –¶—ñ–Ω–∞: {price}\n"
                  f"üìé –ê—Ä—Ç–∏–∫—É–ª: {article}")

        logger.info(f"–ü—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")

        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if user_db.select_user(user_id=int(user_id)) is None:
            loop = asyncio.get_event_loop()
            await loop.run_in_executor(None, user_db.insert_user, int(user_id), user_name, user_phone)
            logger.info(f"–ó–±–µ—Ä–µ–∂–µ–Ω–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {user_id}")

        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        products_data = [{"article": article, "quantity": 1}]
        loop = asyncio.get_event_loop()
        await loop.run_in_executor(
            None,
            order_db.insert_order,
            int(user_id),
            user_address,
            products_data
        )
        logger.info(f"–ó–±–µ—Ä–µ–∂–µ–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")

        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await send_telegram_message(message)
        logger.info("–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É")

        # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        return {
            "status": "success",
            "message": "üéâ –î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è."
        }

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {e}")
        return {"status": "error", "message": str(e)}


@client.on(events.NewMessage())
async def message_handler(event):
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    user_id = event.sender_id
    user_message = event.message.text.strip()
    sender = await event.get_sender()
    username = sender.username if sender and hasattr(sender, 'username') else "No username"

    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    loop = asyncio.get_event_loop()
    await loop.run_in_executor(None, db_for_messages.add_message_to_tg_db,
                             username, user_id, 'Telegram', 'user', user_message)

    if user_message.startswith('/'):
        return

    try:
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–±–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—Ä–µ–¥—É
        thread_data = None
        try:
            thread_data = db_for_thread.search_tread_id(user_id)
        except Exception as e:
            logger.error(f'–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ—Ç–æ–∫—É: {e}')

        if not thread_data:
            thread = openai_client.beta.threads.create()
            await loop.run_in_executor(None, db_for_thread.update_thread_id, user_id, thread.id)
            thread_id = thread.id
            logger.info(f'–°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π —Ç—Ä–µ–¥: {thread.id}')
        else:
            thread_id = thread_data['thread_id']
            logger.info(f'–ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ—Ç—ñ–∫: {thread_id}')
            await cleanup_existing_runs(thread_id)

        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ —Ç—Ä–µ–¥—É
        openai_client.beta.threads.messages.create(
            thread_id=thread_id,
            role="user",
            content=user_message
        )

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –æ–±—Ä–æ–±–∫–∞ run
        run = openai_client.beta.threads.runs.create(
            thread_id=thread_id,
            assistant_id=ASSISTANT_ID
        )

        try:
            run = await wait_for_run_completion(thread_id, run.id)

            if run.status == 'requires_action':
                tool_calls = run.required_action.submit_tool_outputs.tool_calls
                tool_outputs = []

                for tool_call in tool_calls:
                    if tool_call.function.name == "sent_data_for_order":
                        try:
                            function_args = json.loads(tool_call.function.arguments)
                            result = await sent_data_for_order(
                                function_args['user_name'],
                                function_args['user_phone'],
                                function_args['user_address'],
                                function_args['name'],
                                function_args['price'],
                                function_args['article'],
                                user_id
                            )
                            tool_outputs.append({
                                "tool_call_id": tool_call.id,
                                "output": json.dumps(result)
                            })
                            logger.info(f"–£—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ tool_call {tool_call.id}")
                        except Exception as e:
                            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ tool_call: {e}")
                            tool_outputs.append({
                                "tool_call_id": tool_call.id,
                                "output": json.dumps({"status": "error", "message": str(e)})
                            })

                if tool_outputs:
                    run = openai_client.beta.threads.runs.submit_tool_outputs(
                        thread_id=thread_id,
                        run_id=run.id,
                        tool_outputs=tool_outputs
                    )
                    run = await wait_for_run_completion(thread_id, run.id)

            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞
            messages = openai_client.beta.threads.messages.list(thread_id=thread_id)
            assistant_response = messages.data[0].content[0].text.value

            # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞
            await loop.run_in_executor(None, db_for_messages.add_message_to_tg_db,
                                     username, user_id, 'Telegram', 'assistant', assistant_response)

            # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
            await event.reply(assistant_response)

        except TimeoutError as e:
            logger.warning(str(e))
            await event.reply("–í–∏–±–∞—á—Ç–µ, –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑–∞–π–º–∞—î –±—ñ–ª—å—à–µ —á–∞—Å—É –Ω—ñ–∂ –æ—á—ñ–∫—É–≤–∞–ª–æ—Å—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ –∑–∞–ø–∏—Ç.")
            return

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        await event.reply("–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É.")


async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
    print("Starting Telegram client...")
    await client.start(phone=PHONE_NUMBER)
    print("Telegram client started successfully!")
    await client.run_until_disconnected()


if __name__ == '__main__':
    asyncio.run(main())